import express from "express";
import { OrderController } from "../controllers/OrderController";
import { ProductController } from "../controllers/productController";
import { currentUser } from "../middleware/current-user";
import { catchErrors } from "../middleware/error-handler";
import { isAdmin } from "../middleware/is-admin";
import { requireAuth } from "../middleware/require-auth";
const router = express.Router();
router.post("/new", currentUser, requireAuth, isAdmin, catchErrors(ProductController.createProduct));
router.get("/all", catchErrors(ProductController.getAllProducts));
router.get("/:id", catchErrors(ProductController.getProductById));
router.get("/rating/all", currentUser, requireAuth, isAdmin, catchErrors(ProductController.getRatings));
router.delete("/rating", currentUser, requireAuth, isAdmin, catchErrors(ProductController.deleteRating));
router.put("/update/:productId", currentUser, requireAuth, isAdmin, catchErrors(ProductController.updateProduct));
router.post("/rating/create/:productId", currentUser, requireAuth, catchErrors(ProductController.postRating));
router.get("/order/get-checkout", currentUser, requireAuth, catchErrors(OrderController.getCheckout));
router.post("/order/checkout", currentUser, requireAuth, catchErrors(OrderController.createOrder));
router.get("/order/all", currentUser, requireAuth, isAdmin, catchErrors(OrderController.getAllOrders));
router.get("/order/search/:orderId", currentUser, requireAuth, catchErrors(OrderController.getOrderById));
router.get("/order/my-orders", currentUser, requireAuth, catchErrors(OrderController.getOrdersOfCurrentUser));
router.get("/order/my-orders/:orderId", currentUser, requireAuth, catchErrors(OrderController.getMyOrderByOrderId));
router.patch("/order/cancel/:orderId", currentUser, requireAuth, catchErrors(OrderController.cancelOrder));
router.get("/order/track/:orderId", currentUser, requireAuth, catchErrors(OrderController.trackOrder));
router.get("/ordered-products/count", catchErrors(OrderController.getOrderedProductsByCount));
router.get("/filter/top-rated", catchErrors(ProductController.getBestRatedProducts));
router.get("/filter/high-price", catchErrors(ProductController.getHighPriceProducts));
router.get("/filter/low-price", catchErrors(ProductController.getLowPriceProducts));
export { router as productRoute };
